/***************************************************************************************************
* @author           Saravan
* @date             17/June/2020
* @group            IBM
* @description      Batch Class for the Mulesoft NonBP Operated Locations Wrapper Class

* history
* 17/May/2020       Saravan      Created


****************************************************************************************************/

public with sharing class AITM_NonBPOperatedAPIWrapperClass {
    //
    // Generated by JSON2Apex http://json2apex.herokuapp.com/
    //
    // The supplied json has fields with names that are not valid in apex
    // and so can only be parsed with explicitly generated code, this option
    // was auto selected for you.
    
    
    
    public String country_id {get;set;} 
    public String location_country {get;set;} 
    public String non_airport_id {get;set;} 
    public String icao {get;set;} 
    public String iata {get;set;} 
    public String location_type {get;set;} 
    public String location_id {get;set;} 
    public String location_name {get;set;} 
    public String source_id {get;set;}
    
    /**
* @description constructor
* @param JSONParser  
* @return null
*/
    
    public AITM_NonBPOperatedAPIWrapperClass(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'f_country') {
                        country_id = parser.getText();
                    } else if (text == 'iata') {
                        iata = parser.getText();
                    }else if (text == 'location_country') {
                        location_country = parser.getText();
                    }else if (text == 'non_airport_id') {
                        non_airport_id = parser.getText();
                    }
                    else if (text == 'icao') {
                        icao = parser.getText();
                    }
                    else if (text == 'location_type') {
                        location_type = parser.getText();
                    }else if (text == 'location_id') {
                        location_id = parser.getText();
                    }else if (text == 'location_name') {
                        location_name = parser.getText();
                    }else if (text == 'b_sourceid') {
                        source_id = parser.getText();
                    }
                    
                    else {                            
                        consumeObject(parser);
                    }
                }
                
            }
        }
    }
    
    /**
* @description parse method 
* @param String  
* @return list
*/
    
    public static List<AITM_NonBPOperatedAPIWrapperClass> parse(String json) {        
        System.JSONParser parser = System.JSON.createParser(json);
        //return arrayOfJSON2Apex(parser);
        return arrayOfAITM_NonBPOperatedAPIWrapperClass(parser);
    }
    
    /**
* @description consumeobject method 
* @param JSONParser  
* @return null
*/
    
    public static void consumeObject(System.JSONParser parser) {        
        Integer depth = 0;
        
        do {
            System.JSONToken curr = parser.getCurrentToken();            
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                    depth++;
                } else if (curr == System.JSONToken.END_OBJECT ||
                           curr == System.JSONToken.END_ARRAY) {
                               depth--;
                           }
        } while (depth > 0 && parser.nextToken() != null);
    }
    
    
    
    
    /**
* @description arrayOfAITM_NonBPOperatedAPIWrapperClass method 
* @param JSONParser  
* @return list
*/
    
    private static List<AITM_NonBPOperatedAPIWrapperClass> arrayOfAITM_NonBPOperatedAPIWrapperClass(System.JSONParser p) {
        List<AITM_NonBPOperatedAPIWrapperClass> res = new List<AITM_NonBPOperatedAPIWrapperClass>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AITM_NonBPOperatedAPIWrapperClass(p));
        }
        return res;
    }
    
    
    
    
    
    
}